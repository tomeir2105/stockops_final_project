---
###############################################################################
# Stage 2.5 — Deploy Jenkins, Grafana, InfluxDB from YOUR Docker Hub (public)
# - No imagePullSecrets; pulls happen anonymously
# - All config from ../vars.yml and ../group_vars/dockerhub.yml
###############################################################################
- name: Stage 2.5 — Deploy from Hub (no tests)
  hosts: k3s_server
  gather_facts: no
  become: yes

  vars_files:
    - "{{ playbook_dir }}/../group_vars/dockerhub.yml"
    - "{{ playbook_dir }}/../vars.yml"

  vars:
    ns: "{{ NAMESPACE }}"
    nfs_server_ip: "{{ NFS_SERVER_IP }}"
    nfs_base: "{{ NFS_MOUNTPOINT }}"

    # Use repos/tags from your vars (no hardcoded user namespace)
    jenkins_image: "{{ JENKINS_IMAGE_REPO }}:{{ JENKINS_TAG }}"
    grafana_image: "{{ GRAFANA_IMAGE_REPO }}:{{ GRAFANA_TAG }}"
    influxdb_image: "{{ INFLUXDB_IMAGE_REPO }}:{{ INFLUXDB_TAG }}"

    ansible_venv_path: /opt/ansible-venv

  pre_tasks:
    - name: Ensure python3-venv is installed (Debian/Ubuntu)
      ansible.builtin.package:
        name: python3-venv
        state: present

    - name: Create Ansible Python venv (idempotent)
      ansible.builtin.command:
        cmd: "python3 -m venv {{ ansible_venv_path }}"
        creates: "{{ ansible_venv_path }}/bin/python"

    - name: Upgrade pip in venv
      ansible.builtin.command:
        cmd: "{{ ansible_venv_path }}/bin/pip install --upgrade pip"

    - name: Install Kubernetes Python client in venv (PEP 668 safe)
      ansible.builtin.command:
        cmd: "{{ ansible_venv_path }}/bin/pip install kubernetes"

    - name: Switch Ansible to the venv interpreter
      ansible.builtin.set_fact:
        ansible_python_interpreter: "{{ ansible_venv_path }}/bin/python"

    - name: Reconnect so the new interpreter is used
      ansible.builtin.meta: reset_connection

  tasks:
    # Namespace
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ ns }}"

    # Ensure old dockerhub secret is gone (pulls are anonymous now)
    - name: Ensure dockerhub-creds is absent
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: dockerhub-creds
            namespace: "{{ ns }}"

    # PVs
    - name: Create NFS PVs (Jenkins/Grafana/InfluxDB)
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition: |
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: jenkins-pv
            labels: { app: jenkins }
          spec:
            capacity: { storage: "{{ JENKINS_STORAGE }}" }
            accessModes: [ "ReadWriteMany" ]
            persistentVolumeReclaimPolicy: Retain
            nfs:
              server: "{{ nfs_server_ip }}"
              path: "{{ nfs_base }}/jenkins"
          ---
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: grafana-pv
            labels: { app: grafana }
          spec:
            capacity: { storage: "{{ GRAFANA_STORAGE }}" }
            accessModes: [ "ReadWriteMany" ]
            persistentVolumeReclaimPolicy: Retain
            nfs:
              server: "{{ nfs_server_ip }}"
              path: "{{ nfs_base }}/grafana"
          ---
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: influxdb-pv
            labels: { app: influxdb }
          spec:
            capacity: { storage: "{{ INFLUXDB_STORAGE }}" }
            accessModes: [ "ReadWriteMany" ]
            persistentVolumeReclaimPolicy: Retain
            nfs:
              server: "{{ nfs_server_ip }}"
              path: "{{ nfs_base }}/influxdb"

    # PVCs
    - name: Create PVCs bound to PVs (no StorageClass)
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: jenkins-home
            namespace: "{{ ns }}"
          spec:
            accessModes: [ "ReadWriteMany" ]
            resources: { requests: { storage: "{{ JENKINS_STORAGE }}" } }
            volumeName: jenkins-pv
            storageClassName: ""
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: grafana-storage
            namespace: "{{ ns }}"
          spec:
            accessModes: [ "ReadWriteMany" ]
            resources: { requests: { storage: "{{ GRAFANA_STORAGE }}" } }
            volumeName: grafana-pv
            storageClassName: ""
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: influxdb-data
            namespace: "{{ ns }}"
          spec:
            accessModes: [ "ReadWriteMany" ]
            resources: { requests: { storage: "{{ INFLUXDB_STORAGE }}" } }
            volumeName: influxdb-pv
            storageClassName: ""

    # Jenkins
    - name: Deploy Jenkins
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: jenkins
            namespace: "{{ ns }}"
            labels: { app: jenkins }
          spec:
            replicas: 1
            selector: { matchLabels: { app: jenkins } }
            template:
              metadata: { labels: { app: jenkins } }
              spec:
                securityContext:
                  fsGroup: 1000
                  fsGroupChangePolicy: "OnRootMismatch"
                containers:
                  - name: jenkins
                    image: "{{ jenkins_image }}"
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: "{{ JENKINS_API_PORT }}"
                    securityContext:
                      runAsUser: 1000
                      runAsGroup: 1000
                    volumeMounts:
                      - name: jenkins-home
                        mountPath: /var/jenkins_home
                volumes:
                  - name: jenkins-home
                    persistentVolumeClaim: { claimName: jenkins-home }

    - name: Service Jenkins
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: jenkins
            namespace: "{{ ns }}"
            labels: { app: jenkins }
          spec:
            type: NodePort
            selector: { app: jenkins }
            ports:
              - name: http
                port: "{{ JENKINS_API_PORT }}"
                targetPort: "{{ JENKINS_API_PORT }}"
                nodePort: "{{ JENKINS_NODEPORT }}"

    # Grafana
    - name: Deploy Grafana
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: grafana
            namespace: "{{ ns }}"
            labels: { app: grafana }
          spec:
            replicas: 1
            selector: { matchLabels: { app: grafana } }
            template:
              metadata: { labels: { app: grafana } }
              spec:
                securityContext:
                  fsGroup: 472
                  fsGroupChangePolicy: "OnRootMismatch"
                containers:
                  - name: grafana
                    image: "{{ grafana_image }}"
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: "{{ GRAFANA_API_PORT }}"
                    securityContext:
                      runAsUser: 472
                      runAsGroup: 0
                    volumeMounts:
                      - name: grafana-storage
                        mountPath: /var/lib/grafana
                volumes:
                  - name: grafana-storage
                    persistentVolumeClaim: { claimName: grafana-storage }

    - name: Service Grafana
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana
            namespace: "{{ ns }}"
            labels: { app: grafana }
          spec:
            type: NodePort
            selector: { app: grafana }
            ports:
              - name: http
                port: "{{ GRAFANA_API_PORT }}"
                targetPort: "{{ GRAFANA_API_PORT }}"
                nodePort: "{{ GRAFANA_NODEPORT }}"

    # InfluxDB
    - name: Deploy InfluxDB
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: influxdb
            namespace: "{{ ns }}"
            labels: { app: influxdb }
          spec:
            replicas: 1
            selector: { matchLabels: { app: influxdb } }
            template:
              metadata: { labels: { app: influxdb } }
              spec:
                securityContext:
                  fsGroup: 1000
                  fsGroupChangePolicy: "OnRootMismatch"
                containers:
                  - name: influxdb
                    image: "{{ influxdb_image }}"
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: "{{ INFLUX_API_PORT }}"
                    securityContext:
                      runAsUser: 1000
                      runAsGroup: 1000
                    volumeMounts:
                      - name: influxdb-data
                        mountPath: /var/lib/influxdb2
                volumes:
                  - name: influxdb-data
                    persistentVolumeClaim: { claimName: influxdb-data }

    - name: Service InfluxDB
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: influxdb
            namespace: "{{ ns }}"
            labels: { app: influxdb }
          spec:
            type: NodePort
            selector: { app: influxdb }
            ports:
              - name: api
                port: "{{ INFLUX_API_PORT }}"
                targetPort: "{{ INFLUX_API_PORT }}"
                nodePort: "{{ INFLUX_NODEPORT }}"

