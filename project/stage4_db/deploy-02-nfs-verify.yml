######################################
# Created by : Meir
# Purpose    : Verify NFS exports (v4.2) from k3s nodes using temp mounts + UID/GID write tests
# Date       : 2025-10-30
# Version    : 1
######################################
---
- name: Verify NFS exports (NFSv4.2) on all k3s nodes
  hosts: k3s_server,k3s_workers
  become: yes
  gather_facts: no
  vars_files:
    - "{{ playbook_dir }}/../vars.yml"

  vars:
    # Force Ansible to use your controller SSH key for these hosts
    ansible_ssh_private_key_file: "{{ CONTROLLER_KEY_PATH }}"

    nfs_server_ip: "{{ NFS_SERVER_IP }}"
    export_root: "{{ NFS_MOUNTPOINT }}"

    _graf_path: "{{ NFS_MOUNTPOINT }}/grafana"
    _infl_path: "{{ NFS_MOUNTPOINT }}/influxdb"

    grafana_uid: "{{ (APP_DIRS | selectattr('path','equalto', _graf_path) | map(attribute='owner') | first) | default('472') }}"
    grafana_gid: "{{ (APP_DIRS | selectattr('path','equalto', _graf_path) | map(attribute='group') | first) | default('472') }}"
    influx_uid:  "{{ (APP_DIRS | selectattr('path','equalto', _infl_path) | map(attribute='owner') | first) | default('1000') }}"
    influx_gid:  "{{ (APP_DIRS | selectattr('path','equalto', _infl_path) | map(attribute='group') | first) | default('1000') }}"

  pre_tasks:
    - name: Assert required vars are set
      ansible.builtin.assert:
        that:
          - nfs_server_ip is defined and (nfs_server_ip | length > 0)
          - export_root is defined and (export_root | length > 0)
        fail_msg: "Please define NFS_SERVER_IP and NFS_MOUNTPOINT in vars.yml"

  tasks:
    - name: Ensure NFS client + setpriv are installed
      ansible.builtin.apt:
        name: [nfs-common, util-linux]
        state: present
        update_cache: yes

    - name: Create temporary mount dir for grafana
      ansible.builtin.tempfile:
        state: directory
        suffix: _nfs_check_grafana
      register: td_graf

    - name: Create temporary mount dir for influxdb
      ansible.builtin.tempfile:
        state: directory
        suffix: _nfs_check_influxdb
      register: td_infl

    - name: Mount grafana via NFSv4.2
      ansible.builtin.command: >
        mount -t nfs4 -o rw,vers=4.2 {{ nfs_server_ip }}:{{ export_root }}/grafana {{ td_graf.path }}
      register: m1
      failed_when: m1.rc != 0 and
                   'already mounted' not in (m1.stderr|default('')) and
                   'already mounted' not in (m1.stdout|default(''))
      changed_when: m1.rc == 0

    - name: Mount influxdb via NFSv4.2
      ansible.builtin.command: >
        mount -t nfs4 -o rw,vers=4.2 {{ nfs_server_ip }}:{{ export_root }}/influxdb {{ td_infl.path }}
      register: m2
      failed_when: m2.rc != 0 and
                   'already mounted' not in (m2.stderr|default('')) and
                   'already mounted' not in (m2.stdout|default(''))
      changed_when: m2.rc == 0

    - name: UID {{ grafana_uid }} can create a file in grafana dir
      ansible.builtin.command:
        cmd: setpriv --reuid {{ grafana_uid }} --regid {{ grafana_gid }} --clear-groups touch {{ td_graf.path }}/_verify_write.txt

    - name: UID {{ influx_uid }} can create a file in influxdb dir
      ansible.builtin.command:
        cmd: setpriv --reuid {{ influx_uid }} --regid {{ influx_gid }} --clear-groups touch {{ td_infl.path }}/_verify_write.txt

    - name: Unmount (ignore errors)
      ansible.builtin.command: umount -fl {{ item }}
      loop:
        - "{{ td_graf.path }}"
        - "{{ td_infl.path }}"
      register: um
      failed_when: false
      changed_when: >
        'not mounted' not in (um.stderr|default('')) and
        'not mounted' not in (um.stdout|default(''))

    - name: Remove temporary mount dirs
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ td_graf.path }}"
        - "{{ td_infl.path }}"
      ignore_errors: yes

