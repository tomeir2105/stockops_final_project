######################################
# Created by : Meir
# Purpose    : Create (idempotent) InfluxDB v2 Org & Bucket via API.
#              Runs kubectl port-forward ON k3s_server (192.168.50.101) if INFLUX_URL not set.
# Date       : 2025-10-30
# Version    : 5
######################################
---
- name: Create InfluxDB org and bucket from k3s_server
  hosts: k3s_server
  gather_facts: false
  become: false
  vars_files:
    - "{{ playbook_dir }}/../vars.yml"
  vars:
    ns: "{{ NAMESPACE | default('default') }}"
    use_direct_url: "{{ (INFLUX_URL | default('')) | length > 0 }}"
    pf_port: 18086
    pf_pidfile: "/tmp/pf_influx_{{ ns }}.pid"
    influx_url_eff: >-
      {{
        (INFLUX_URL | default(''))
        if use_direct_url
        else ('http://127.0.0.1:' ~ pf_port|string)
      }}
    influx_org: "{{ INFLUX_ORG | default('stockops') }}"
    influx_bucket: "{{ INFLUX_BUCKET | default('stockops') }}"
    influx_retention_hours: "{{ INFLUX_RETENTION_HOURS | default(0) }}"
    influx_token: "{{ INFLUXDB_ADMIN_TOKEN | default(INFLUXDB_TOKEN, true) | default('', true) }}"
    ansible_ssh_private_key_file: "{{ CONTROLLER_KEY_PATH }}"
  environment:
    KUBECONFIG: "{{ KUBECONFIG | default('') }}"

  tasks:
    - block:
        - name: Start port-forward on k3s_server when INFLUX_URL not set
          shell: |
            set -Eeuo pipefail
            if [ -f "{{ pf_pidfile }}" ]; then
              oldpid="$(cat {{ pf_pidfile }} || true)"
              if [ -n "$oldpid" ] && ! ps -p "$oldpid" >/dev/null 2>&1; then
                rm -f "{{ pf_pidfile }}"
              fi
            fi
            if [ -f "{{ pf_pidfile }}" ]; then
              exit 0
            fi
            nohup kubectl -n "{{ ns }}" port-forward svc/influxdb {{ pf_port }}:8086 \
              > /tmp/pf_influx_{{ ns }}.log 2>&1 &
            echo $! > "{{ pf_pidfile }}"
          args: { executable: /bin/bash }
          changed_when: false
          when: not use_direct_url

        - name: Wait for local port on k3s_server
          wait_for:
            host: "127.0.0.1"
            port: "{{ pf_port }}"
            delay: 0
            timeout: 30
          when: not use_direct_url

        - name: Validate required inputs
          assert:
            that:
              - influx_token | length > 0
              - influx_org | length > 0
              - influx_bucket | length > 0
              - influx_url_eff | length > 0
            fail_msg: >
              Missing Influx settings. Ensure INFLUXDB_ADMIN_TOKEN (or INFLUXDB_TOKEN),
              INFLUX_ORG, INFLUX_BUCKET, and either INFLUX_URL or a working kubectl context.

        - name: Compute retention rule payload
          set_fact:
            retention_rules: >-
              {{
                [] if (influx_retention_hours | int) <= 0 else
                [ { "type": "expire", "everySeconds": (influx_retention_hours | int) * 3600 } ]
              }}

        - name: Lookup org by name
          uri:
            url: "{{ influx_url_eff }}/api/v2/orgs?name={{ influx_org | urlencode }}"
            method: GET
            headers:
              Authorization: "Token {{ influx_token }}"
            return_content: true
            status_code: [200]
          register: org_lookup

        - name: Normalize candidate orgs (exact-name match)
          set_fact:
            _org_candidates: >-
              {{
                (org_lookup.json.orgs | default([]))
                | selectattr('name','equalto', influx_org) | list
              }}

        - name: Extract org_id if present (safe)
          set_fact:
            org_id: "{{ (_org_candidates | first | default({})).id | default(None) }}"

        - name: Debug â€” show match state
          debug:
            msg:
              - "Found orgs count: {{ _org_candidates|length }}"
              - "org_id (pre-create): {{ org_id | default('None') }}"

        - name: Create org if missing
          uri:
            url: "{{ influx_url_eff }}/api/v2/orgs"
            method: POST
            headers:
              Authorization: "Token {{ influx_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              name: "{{ influx_org }}"
            return_content: true
            status_code: [201]
          register: org_create
          when: org_id is not defined or org_id is none
          changed_when: true

        - name: Use created org_id when new org was created (safe)
          set_fact:
            org_id: "{{ (org_create | default({})).get('json', {}).get('id', org_id) }}"
          when: org_create is defined

        # ---- Bucket lookup: accept 200 or 404 and compute existence safely ----
        - name: Lookup bucket by name within org
          uri:
            url: "{{ influx_url_eff }}/api/v2/buckets?name={{ influx_bucket | urlencode }}&orgID={{ org_id }}"
            method: GET
            headers:
              Authorization: "Token {{ influx_token }}"
            return_content: true
            status_code: [200, 404]
          register: bucket_lookup

        - name: Determine if bucket exists
          set_fact:
            bucket_exists: >-
              {{
                False if (bucket_lookup.status | default(0)) == 404
                else ((bucket_lookup.json.buckets | default([]) | length) > 0)
              }}
        # -----------------------------------------------------------------------

        - name: Create bucket if missing
          uri:
            url: "{{ influx_url_eff }}/api/v2/buckets"
            method: POST
            headers:
              Authorization: "Token {{ influx_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              name: "{{ influx_bucket }}"
              orgID: "{{ org_id }}"
              retentionRules: "{{ retention_rules }}"
            return_content: true
            status_code: [201]
          when: not bucket_exists
          changed_when: true

        - name: Show result
          debug:
            msg:
              - "Influx URL (effective on k3s1): {{ influx_url_eff }}"
              - "Org: {{ influx_org }} (id: {{ org_id }})"
              - "Bucket: {{ influx_bucket }}"
              - "Retention (hours): {{ influx_retention_hours }}"
              - "Status: {{ 'created' if (not bucket_exists) else 'already present' }}"

      always:
        - name: Cleanup port-forward on k3s_server if we started it
          shell: |
            set -Eeuo pipefail
            if [ -f "{{ pf_pidfile }}" ]; then
              pid="$(cat {{ pf_pidfile }} || true)"
              if [ -n "$pid" ]; then
                kill "$pid" 2>/dev/null || true
              fi
              rm -f "{{ pf_pidfile }}"
            fi
          args: { executable: /bin/bash }
          changed_when: false
          when: not use_direct_url

