#!/usr/bin/env bash
set -euo pipefail

SERVICE_NAME="ansible-env-onboot.service"
SERVICE_DST="/etc/systemd/system/${SERVICE_NAME}"
BOOT_HELPER="/usr/local/bin/ansible-env-onboot.sh"
PROFILE_DROP="/etc/profile.d/ansible_env.sh"

# Require root
if [[ $EUID -ne 0 ]]; then
  echo "Run as root (sudo)." >&2
  exit 1
fi

# Ensure the service file is present in the current directory
if [[ ! -f "./${SERVICE_NAME}" ]]; then
  echo "Missing ./${SERVICE_NAME} in current directory." >&2
  exit 1
fi

# Install the service unit
cp "./${SERVICE_NAME}" "${SERVICE_DST}"

# Create the one-shot boot helper that finds ansible.cfg and writes env exports
cat > "${BOOT_HELPER}" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

# Search a few likely roots to avoid scanning the whole filesystem
SEARCH_ROOTS=("/home" "/root")
MAX_DEPTH=5
TIMEOUT=60

echo "[ansible-env-onboot] searching for ansible.cfg..."

FOUND_CFG=""
deadline=$(( $(date +%s) + TIMEOUT ))
while [[ -z "${FOUND_CFG}" && $(date +%s) -lt ${deadline} ]]; do
  for base in "${SEARCH_ROOTS[@]}"; do
    # fastest reasonable scan
    FOUND_CFG="$(find "$base" -maxdepth ${MAX_DEPTH} -type f -name ansible.cfg 2>/dev/null | head -n1 || true)"
    [[ -n "${FOUND_CFG}" ]] && break
  done
  [[ -z "${FOUND_CFG}" ]] && sleep 1
done

if [[ -z "${FOUND_CFG}" ]]; then
  echo "[ansible-env-onboot] ansible.cfg not found within ${TIMEOUT}s; nothing to export."
  exit 0
fi

PROJECT_ROOT="$(dirname "${FOUND_CFG}")"
ANSIBLE_CFG="${PROJECT_ROOT}/ansible.cfg"
INV_FILE="${PROJECT_ROOT}/inventory.ini"

# Write a global shell export so login shells get it (one-time)
# Note: this affects interactive shells; systemd units need explicit Environment= if desired.
cat > /etc/profile.d/ansible_env.sh <<EOPROF
# Auto-generated by ansible-env-onboot.service
export ANSIBLE_CONFIG="${ANSIBLE_CFG}"
[ -f "${INV_FILE}" ] && export ANSIBLE_INVENTORY="${INV_FILE}"
EOPROF

chmod 0644 /etc/profile.d/ansible_env.sh
echo "[ansible-env-onboot] exported ANSIBLE_CONFIG=${ANSIBLE_CFG}"
exit 0
EOF

chmod +x "${BOOT_HELPER}"

# Activate the service
systemctl daemon-reload
systemctl enable "${SERVICE_NAME}"
systemctl start "${SERVICE_NAME}"

echo "Installed and started ${SERVICE_NAME}."
echo "Login shells will inherit ANSIBLE_CONFIG via /etc/profile.d/ansible_env.sh after next login."

